#!/usr/bin/env bash
RESET_COLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'

if [ ! -d "$HOME/.dotfiles" ];
then
  echo "Couldn't locate ~./dotfiles"
  exit
fi

SYNC_REMOTE=true
while [ $# -gt 0 ]; do
	case "$1" in
	-l|--local)
		SYNC_REMOTE=false
		;;
	*)
		;;
	esac
	shift
done

DOTFILES_DIR="$HOME/.dotfiles/"
cd $DOTFILES_DIR

if $SYNC_REMOTE ; then
	echo "--- Pulling changes from remote ------------------------------"
	git fetch
	git pull origin main
fi

# syncing all
echo "--- Performing sync ------------------------------------------"

IGNORE_FILE="$DOTFILES_DIR/sync-ignore"
echo "Sync ignore file at $IGNORE_FILE"

IGNORE_PATTERNS=()
while IFS= read -r line; do
	if echo $line | grep -q -E '^\s*$|^#'; then
		continue # ignoring comments and whitespace lines
	fi
	IGNORE_PATTERNS+=( $line )
done < $IGNORE_FILE
echo "Ignore patterns: ${IGNORE_PATTERNS[*]}"

function is_ignored() {
	file=$1
	path="$(pwd)/$file"
	local_path="${path#"$DOTFILES_DIR"}"
	for pattern in ${IGNORE_PATTERNS[@]}; do
		# !! pattern matching, not glob matching
		if [[ $local_path == $pattern ]]; then
			return 0 # ignore
		fi
	done
	return 1
}

function traverse_directories() {
	cd $1
	for file in * .[^.]* ; do
		# ignore if not a dir or if ignored
		if ! [[ -d "$file" ]] || is_ignored $file; then
			continue
		fi

		for i in $(seq $2); do
			echo -n "|   "
		done
		echo -n "|-- $file/"
		
		# mirroring directory
		rel_path=$(echo "$(pwd)/$file" | sed 's/.*\/\.dotfiles\///')
		mkdir "$HOME/$rel_path" 2> /dev/null
		if [[ $? -eq 0 ]]; then
			echo -e "$GREEN (new)$RESET_COLOR"
		else
			echo ""
		fi
		
		# recursive call
		traverse_directories $file $(($2 + 1))
	done
	cd ..
}
echo "Mirroring folder structure:"

shopt -s extglob nullglob
echo "~/"
traverse_directories . 0
cd "$DOTFILES_DIR"

function traverse_files() {
	cd $1
	for file in * .[^.]*; do
		# ignore if file is ignored
		if is_ignored $file; then
			continue
		fi

		home_path="$HOME/$(echo "$(pwd)/$file" | sed 's/.*\/\.dotfiles\///')"

		if [[ ! -d "$home_path" ]]; then
			echo -n " - $home_path: "
			if [[ -h "$home_path" ]]; then
				echo "Symlink exists"
			elif [[ -e "$home_path" ]]; then
				echo -e "${RED}ERROR! Conflicting file exists$RESET_COLOR"
			else
				ln -s "$(pwd)/$file" "$home_path" &> out
				if [[ $? -eq 0 ]]; then
					echo -e "${GREEN}Created symlink$RESET_COLOR"
				else
					echo -e "${RED}ERROR! Failed to create symlink:$RESET_COLOR"
					cat out
				fi
				rm out
			fi
		else	
			traverse_files $file
		fi

	done
	cd ..
}

echo "Linking files:"
traverse_files .
cd "$DOTFILES_DIR"

if $SYNC_REMOTE ; then
	echo "--- Pushing changes to remote --------------------------------"
	git add .
	git commit -m "Sync $(date)"
	git push origin main
fi

echo "--- Complete -------------------------------------------------"
exit
